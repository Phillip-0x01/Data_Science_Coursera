lambda <- 0.2
data <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
data$means <-apply(data, 1, mean)
data.mean <- mean(data$means)
data.sd <- sd(data$means)
data.var <- var(data$means)
theoretical.mean <- 1/lambda
theoretical.sd <- ((1/lambda) / (sqrt(n)))
theoretical.var <- (theoretical.sd)^2
data.mean <- mean(data$means)
theoretical.mean <- 1/lambda
data.mean; theoretical.mean
```
data.var <- var(data$means)
theoretical.sd <- ((1/lambda) / (sqrt(n)))
theoretical.var <- (theoretical.sd)^2
data.var; theoretical.var
df2 <- data.var; theoretical.var
df1 <- c(data.var, theoretical.var)
df1
df1 <- df1(names(c("Simulation Variance", "Theoretical Variance")))
df1
df1 <- c(data.var, theoretical.var)
df1 <- df1(names(c("Simulation Variance", "Theoretical Variance")))
df1 <- names(c("Simulation Variance", "Theoretical Variance")))
df1 <- names(c("Simulation Variance", "Theoretical Variance"))
df1
df1 <- c("Simulation Variance", "Theoretical Variance"))
df1 <- c("Simulation Variance", "Theoretical Variance")
df1
df1 <- c(data.var, theoretical.var)
df1 <- c("Simulation Variance", "Theoretical Variance")
df1
df1$1 <- c("Theoretical Variance", theoretical.var)
df1$2 <- c("Simulation Variance", data.var)
df1$a <- c("Theoretical Variance", theoretical.var)
df1 <- c("Theoretical Variance", theoretical.var)
df1$b <- c("Simulation Variance", data.var)
df1
df1 <- c("Theoretical Variance", theoretical.var)
df2 <- c("Simulation Variance", data.var)
df1; df2
df1 <- c(Theoretical Variance, theoretical.var)
df1 <- c(Theoretical Variance, theoretical.var)
df1 <- c("Theoretical Variance", theoretical.var)
df2 <- c("Simulation Variance", data.var)
df1; df2
df1 <- data.frame(Simulation Variance = data.var, Theoretical Variance = theoretical.var)
data.meantheoretical.mean
data.var <- var(data$means)
theoretical.sd <- ((1/lambda) / (sqrt(n)))
theoretical.var <- (theoretical.sd)^2
data.var
theoretical.var
sim <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
sim$means <-apply(sim, 1, mean)
sim.mean <- mean(sim$means)
theoretical.mean <- 1/lambda
sim.mean
theoretical.mean
sim.var <- var(sim$means)
theoretical.sd <- ((1/lambda) / (sqrt(n)))
theoretical.var <- (theoretical.sd)^2
sim.var
theoretical.var
set.seed(223)
nosim <- 1000
n <- 40
lambda <- 0.2
sim <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
sim$means <-apply(sim, 1, mean)
sim.mean <- mean(sim$means)
theoretical.mean <- 1/lambda
sim.mean
theoretical.mean
sim.var <- var(sim$means)
theoretical.sd <- ((1/lambda) / (sqrt(n)))
theoretical.var <- (theoretical.sd)^2
sim.var
theoretical.var
round(sim.mean, 3)
round(theoretical.mean, 3)
round(sim.var, 3)
round(theoretical.var, 3)
round(sim.var, 3)
df2 <- c(round(sim.var, 3), round(theoretical.var, 3))
colnames(df2) <- c("Simulated Variance", "Theoretical Variance")
df2
df2 <- colnames("Simulated Variance", "Theoretical Variance")
df2 <- colnames(c("Simulated Variance", "Theoretical Variance"))
df2
df2 <- c(round(sim.var, 3), round(theoretical.var, 3))
df2 <- colnames(c("Simulated Variance", "Theoretical Variance"))
df2
df2 <- c(round(sim.var, 3), round(theoretical.var, 3))
colnames(df2) <- c("Simulated Variance", "Theoretical Variance"))
colnames(df2) <- c("Simulated Variance", "Theoretical Variance")
colnames(df2)[1] <- "Simulated Variance""
df2 <- c(round(sim.var, 3), round(theoretical.var, 3))
colnames(df2)[1] <- "Simulated Variance"
c <- c("Simulation Variance" round(sim.var, 3))
d <- c("Theretical Variance", round(theoretical.var, 3))
c;d
c <- c("Simulation Variance", round(sim.var, 3))
d <- c("Theretical Variance", round(theoretical.var, 3))
c;d
a <- c("Simulated Mean", round(sim.mean, 3))
b <- c("Theoretical Mean", round(theoretical.mean, 3))
a; b
g <- ggplot(data, aes(x=means))
g <- g + geom_histogram(aes(y=..density..), binwidth=.2, colour="black", fill="lightgrey")
g <- g + geom_density(alpha=.2, size=1, colour="red")
g <- g + geom_vline(aes(xintercept=mean(data$mean, na.rm=T)), color="red", linetype="dashed", size=1)
g
require(ggplot2)
g <- ggplot(data, aes(x=means))
g <- g + geom_histogram(aes(y=..density..), binwidth=.2, colour="black", fill="lightgrey")
g <- g + geom_density(alpha=.2, size=1, colour="red")
g <- g + geom_vline(aes(xintercept=mean(data$mean, na.rm=T)), color="red", linetype="dashed", size=1)
g
nd <- rnorm(n=1000, m=1, sd=1)
nd <- rnorm(n=1000, m=1, sd=1)
g <- ggplot(nd, aes(x=m))
nd_mean <- mean(nd)
g <- ggplot(nd, aes(x=nd_mean))
nd <- rnorm(n=1000, m=1, sd=1)
hist(nd)
hist(nd, binwidth=.2)
hist(nd, breaks=100)
nd <- rnorm(n=1000000, m=1, sd=1)
hist(nd, breaks=100)
hist(nd, breaks=10)
nd <- rnorm(n=10000, m=1, sd=1)
hist(nd, breaks=10)
hist(nd, breaks=10000)
hist(nd, breaks=100)
nd <- rnorm(n=1000, m=1, sd=1)
hist(nd, breaks=100)
nd <- rnorm(n=100, m=1, sd=1)
hist(nd, breaks=100)
nd <- rnorm(n=10000000, m=1, sd=1)
hist(nd)
nd <- rnorm(n=10000000, m=1, sd=1)
hist(nd)
hist(nd, breaks=100)
hist(nd, breaks=100, density=TRUE)
lines(density(nd), col="blue", lwd=2)
lines(density(X), col="blue", lwd=2)
m <- 1
nd <- rnorm(n=10000000, m=1, sd=1)
hist(nd, breaks=100, density=TRUE)
lines(density(X), col="blue", lwd=2)
lines(density(m), col="blue", lwd=2)
mean_nd <- mean(nd)
X<- mean(nd)
lines(density(X), col="blue", lwd=2)
nd <- rnorm(n=10000, m=1, sd=1)
X<- mean(nd)
hist(nd, breaks=100)
lines(density(X), col="blue", lwd=2)
nd <- rnorm(n=100000, m=1, sd=1)
X<- mean(nd)
hist(nd, breaks=100)
lines(density(X), col="blue", lwd=2)
nd <- rnorm(n=1000000, m=1, sd=1)
X<- mean(nd)
hist(nd, breaks=100)
nd <- rnorm(n=10000000, m=1, sd=1)
X<- mean(nd)
hist(nd, breaks=100)
lines(density(X), col="blue", lwd=2)
g <- ggplot(nd, aes(x=mean(nd)))
hist(nd, breaks=100, col="blue")
g <- ggplot(data, aes(x=means))
g <- g + geom_histogram(aes(y=..density..), binwidth=.2, colour="black", fill="lightgrey")
g <- g + geom_density(alpha=.2, size=1, colour="red")
g <- g + geom_vline(aes(xintercept=mean(data$mean, na.rm=T)), color="red", linetype="dashed", size=1)
g
nd <- rnorm(n=10000000, m=1, sd=1)
hist(nd, breaks=100, col="blue")
sim <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
sim$means <-apply(sim, 1, mean)
set.seed(223)
nosim <- 1000
n <- 40
lambda <- 0.2
sim <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
sim$means <-apply(sim, 1, mean)
sim.mean <- mean(sim$means)
theoretical.mean <- 1/lambda
a <- c("Simulated Mean", round(sim.mean, 3))
b <- c("Theoretical Mean", round(theoretical.mean, 3))
a; b
sim.var <- var(sim$means)
theoretical.sd <- ((1/lambda) / (sqrt(n)))
theoretical.var <- (theoretical.sd)^2
c <- c("Simulation Variance", round(sim.var, 3))
d <- c("Theretical Variance", round(theoretical.var, 3))
c;d
g <- ggplot(sim, aes(x=means))
g <- g + geom_histogram(aes(y=..density..), binwidth=.2, colour="black", fill="lightgrey")
g <- g + geom_density(alpha=.2, size=1, colour="red")
g <- g + geom_vline(aes(xintercept=mean(sim$mean, na.rm=T)), color="red", linetype="dashed", size=1)
g
nd <- rnorm(n=10000000, m=1, sd=1)
hist(nd, breaks=100, col="blue")
sim <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
sim$means <-apply(sim, 1, mean)
sim.mean <- mean(sim$means)
set.seed(223)
nosim <- 1000
n <- 40
lambda <- 0.2
sim <- data.frame(replicate(n, sample(rexp(nosim, rate = lambda))))
sim$means <-apply(sim, 1, mean)
sim.mean <- mean(sim$means)
theoretical.mean <- 1/lambda
a <- c("Simulated Mean", round(sim.mean, 3))
b <- c("Theoretical Mean", round(theoretical.mean, 3))
a; b
sim$means <-apply(sim, 1, mean)
sim.mean <- mean(sim$means)
nd <- rnorm(n=10000000, m=5, sd=1)
hist(nd, breaks=100, col="blue", yaxt='n', ann=FALSE)
rm(list = ls())
library(datasets)
data(ToothGrowth)
names(ToothGrowth)
a <- 1017.5 / 2
a - 64.64 - 76 - 100
a
17 * 8
rm(list = ls())
names(ToothGrowth)
str(ToothGrowth)
TG <- ToothGrowth
plot(TG$len, TG$supp)
plot(TG$len, TG$dose)
plot(TG$supp, TG$dose)
summary(TG)
summary(TG$dose)
dist(TG$dose)
summary(TG)
TG$dose <- as.factor(TG$dose)
summary(TG)
str(TG)
mean.len <- mean(TG$mean)
mean.len <- mean(TG$len)
variance.len <- var(TG$len)
mean.len
variance.len
summary(TG)
names(TG)
t.test(TG$len, TG$supp)
t.test(TG$len)
t.test(TG$supp)
t.test(TG$dose)
rm(list=ls())
dt1<- data.table(data)
dt2 <- data.table(timeTotal)
dt1[is.na(steps), steps:= dt2[copy(.SD), avg, on="interval"]]
#####
#check for file in current director, download
if(!file.exists("repdata-data-activity.zip")) {
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp)
file <- unzip(temp)
unlink(temp)}
file <- unzip("repdata-data-activity.zip")
#####
#add libraries
require(dplyr)
require(ggplot2)
require(data.table)
#####
#import table
activity <- read.csv(file, header=TRUE)
data <- activity
#####
#explore
names(data)
head(data)
str(data)
data$interval <- as.factor(data$interval)
sum(is.na(data$steps))
summary(data)
#remove na's from table
data2 <- data %>%
filter(!is.na(steps))
summary(data2)
barplot(data2$steps)
#####
#Step 2 - total steps per day
dateTotal <- data %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps))
sum(dateTotal$steps)
mean1 <- round(mean(dateTotal$steps), 0)
median1 <- median(dateTotal$steps)
ggplot(dateTotal, aes(x = steps)) +
geom_histogram(fill = "#3399FF", binwidth = 1000) +
labs(title = "Distribution of Total Steps per Day with NA's Removed",
x = "Total steps per day", y = "Frequency")
#####
#Step 3 - make a time series plot showing steps per time frame
timeTotal <- data2 %>%
group_by(interval) %>%
summarise(avg = mean(steps))
head(timeTotal)
#get highest average steps in a time frame
timeTotal %>%
top_n(n=2)
ggplot(timeTotal, aes(x = interval, y = avg))+
geom_line(aes(group=1), colour = "#3399FF") +     # Group all points; otherwise no line will show
geom_point(size=2) +
labs(title = "The Distribution of Total Steps per Time Interval",
x = "Total steps per time interval", y = "Frequency")
max(timeTotal$avg)
#####
#Step 4 - missing values
#number of missing values
sum(is.na(data$steps))
#replace missing values with average value for given time period
dt1<- data.table(data)
dt2 <- data.table(timeTotal)
dt1[is.na(steps), steps:= dt2[copy(.SD), avg, on="interval"]]
#calcuate steps per day
dt3 <- dt1[, sum(steps), by = date]
colnames(dt3)[2] <- "steps"e
mean2 <- round(mean(dt1$steps), 0)
median2 <- median(dt1$steps)
ggplot(dt1, aes(x = steps)) +
geom_histogram(fill = "#3399FF", binwidth = 1000)+
labs(title = "Distribution of Total Steps per Day with NA's Removed",
x = "Total steps per day", y = "Frequency")
labels <- c("With NA's", "NAs replaced")
means <- c(mean1, mean2)
medians <- c(median1, median2)
comparison <- table(c(means, medians))#, row.names(c("With NAs", "NAs replaced")))
data.frame(labels, means, medians)
#Step 5 - compare weekdays to weekends
dt1$date<- as.Date(dt1$date)
weektype <- mutate(dt1, weektype = ifelse(weekdays(date) == "Saturday"
| weekdays(date) == "Sunday",
"weekend", "weekday"))
dt1$weektype <- as.factor(weeky)
#####  ggplot chart
data_full$weektype <- as.factor(data_full$weektype)
head(data_full)
interval_full <- data_full %>%
group_by(interval, weektype) %>%
summarise(steps = mean(steps))
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
print(s)
setwd("~/Documents/Data Science/DS_Cert_JH/5 - Reproducible Research/Course Project 1")
if(!file.exists("repdata-data-activity.zip")) {
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp)
file <- unzip(temp)
unlink(temp)}
file <- unzip("repdata-data-activity.zip")
activity <- read.csv(file, header=TRUE)
data <- activity
#####
#explore
names(data)
head(data)
str(data)
data$interval <- as.factor(data$interval)
sum(is.na(data$steps))
summary(data)
#remove na's from table
data2 <- data %>%
filter(!is.na(steps))
summary(data2)
barplot(data2$steps)
#####
#Step 2 - total steps per day
dateTotal <- data %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps))
sum(dateTotal$steps)
mean1 <- round(mean(dateTotal$steps), 0)
median1 <- median(dateTotal$steps)
ggplot(dateTotal, aes(x = steps)) +
geom_histogram(fill = "#3399FF", binwidth = 1000) +
labs(title = "Distribution of Total Steps per Day with NA's Removed",
x = "Total steps per day", y = "Frequency")
#####
#Step 3 - make a time series plot showing steps per time frame
timeTotal <- data2 %>%
group_by(interval) %>%
summarise(avg = mean(steps))
head(timeTotal)
#get highest average steps in a time frame
timeTotal %>%
top_n(n=2)
ggplot(timeTotal, aes(x = interval, y = avg))+
geom_line(aes(group=1), colour = "#3399FF") +     # Group all points; otherwise no line will show
geom_point(size=2) +
labs(title = "The Distribution of Total Steps per Time Interval",
x = "Total steps per time interval", y = "Frequency")
max(timeTotal$avg)
#####
#Step 4 - missing values
#number of missing values
sum(is.na(data$steps))
#replace missing values with average value for given time period
dt1<- data.table(data)
dt2 <- data.table(timeTotal)
dt1[is.na(steps), steps:= dt2[copy(.SD), avg, on="interval"]]
#calcuate steps per day
dt3 <- dt1[, sum(steps), by = date]
colnames(dt3)[2] <- "steps"e
mean2 <- round(mean(dt1$steps), 0)
median2 <- median(dt1$steps)
colnames(dt3)[2] <- "steps"
mean2 <- round(mean(dt1$steps), 0)
median2 <- median(dt1$steps)
ggplot(dt1, aes(x = steps)) +
geom_histogram(fill = "#3399FF", binwidth = 1000)+
labs(title = "Distribution of Total Steps per Day with NA's Removed",
x = "Total steps per day", y = "Frequency")
labels <- c("With NA's", "NAs replaced")
means <- c(mean1, mean2)
medians <- c(median1, median2)
comparison <- table(c(means, medians))#, row.names(c("With NAs", "NAs replaced")))
ggplot(dt3, aes(x = steps)) +
geom_histogram(fill = "#3399FF", binwidth = 1000)+
labs(title = "Distribution of Total Steps per Day with NA's Removed",
x = "Total steps per day", y = "Frequency")
labels <- c("With NA's", "NAs replaced")
means <- c(mean1, mean2)
medians <- c(median1, median2)
comparison <- table(c(means, medians))#, row.names(c("With NAs", "NAs replaced")))
data.frame(labels, means, medians)
#Step 5 - compare weekdays to weekends
dt1$date<- as.Date(dt1$date)
weektype <- mutate(dt1, weektype = ifelse(weekdays(date) == "Saturday"
| weekdays(date) == "Sunday",
"weekend", "weekday"))
dt1$weektype <- as.factor(weeky)
#####  ggplot chart
str(dt1)
head(weektype)
head(weektype, 250)
head(weektype,500)
str(weektype)
weektype <- as.factor(weektype)
weektype <- as.data.frame(weektype)
weektype <- as.factor(weektype)
str(weektype)
unique(weektype)
weektype <- as.factor(weektype)
head(weektype)
weektype$weektype <- as.factor(weektype$weektype)
dt4 <- mutate(dt1, weektype = ifelse(weekdays(date) == "Saturday"
| weekdays(date) == "Sunday",
"weekend", "weekday"))
str(dt4)
dt4$weektype <- as.factor(dt4$weektype)
df4$weektype <- as.factor(data_full$weektype)
df5 <- dt4 %>%
group_by(interval, weektype) %>%
summarise(steps = mean(steps))
s <- ggplot(df5, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
print(s)
df5
str(dt5)
str(df5)
s <- ggplot(df5, aes(x=interval, y=steps, color = weektype)) +
print(s)
s <- ggplot(df5, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
print(s)
df5 <- df4 %>%
group_by(interval, weektype) %>%
summarise(steps = mean(steps))
s <- ggplot(df5, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
print(s)
str(df5)
View(df5)
s <- ggplot(df5, aes(x = interval, y = steps, color = weektype))
s <- s + geom_line()
s <- s + facet_wrap(~weektype, ncol = 1, nrow=2)
print(s)
data.frame(labels, means, medians)
labels <- c("With NA's", "NAs replaced")
means <- c(mean1, mean2)
medians <- c(median1, median2)
comparison <- table(c(means, medians))#, row.names(c("With NAs", "NAs replaced")))
data.frame(labels, means, medians)
dt3 <- dt1[, sum(steps), by = date]
colnames(dt3)[2] <- "steps"
mean2 <- round(mean(dt3$steps), 0)
median2 <- median(dt3$steps)
labels <- c("With NA's", "NAs replaced")
means <- c(mean1, mean2)
medians <- c(median1, median2)
comparison <- table(c(means, medians))#, row.names(c("With NAs", "NAs replaced")))
data.frame(labels, means, medians)
setwd("~/Documents/Data Science/DS_Cert_JH/5 - Reproducible Research/Course Project 1")
dt1$date<- as.Date(dt1$date)
